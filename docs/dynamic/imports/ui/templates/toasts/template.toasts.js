function module(){Template.__checkName("toasts"),Template.toasts=new Template("Template.toasts",(function(){var n=this;return[HTML.Raw("<h1>Toasts</h1>\n  <hr>\n\n  "),Blaze.If((function(){return Spacebars.call(n.lookup("loaded"))}),(function(){return["\n\n  ",HTML.H2({class:"my-4"},"Add Toasts"),"\n\n  ",Blaze.Each((function(){return Spacebars.call(n.lookup("themeColors"))}),(function(){return["\n    ",Blaze._TemplateWith((function(){return{colortype:Spacebars.call(n.lookup(".")),"data-color":Spacebars.call(n.lookup(".")),label:Spacebars.call(n.lookup("."))}}),(function(){return Spacebars.include(n.lookupTemplate("button"))})),"\n  "]})),"\n\n  ",HTML.H4({class:"my-4"},"Parameters"),"\n\n    ",HTML.DIV({class:"form-group form-check form-check-inline"},"\n      ",HTML.INPUT({class:"form-check-input",type:"checkbox",value:"",id:"transparent"}),"\n      ",HTML.LABEL({class:"form-check-label",for:"transparent"}," Transparent "),"\n    "),"\n    ",HTML.DIV({class:"form-group form-check form-check-inline"},"\n      ",HTML.INPUT({class:"form-check-input",type:"checkbox",value:"",id:"autohide"}),"\n      ",HTML.LABEL({class:"form-check-label",for:"autohide"}," Autohide "),"\n    "),"\n    ",HTML.DIV({class:"form-group form-check form-check-inline"},"\n      ",HTML.INPUT({class:"form-check-input",type:"checkbox",checked:"",value:"",id:"prepend"}),"\n      ",HTML.LABEL({class:"form-check-label",for:"prepend"}," Prepend "),"\n    "),"\n\n  ",HTML.P({class:"my-4"},"Toasts are added using the ",HTML.CODE("BlazeBs4.toast.add")," function. The following example shows how the toasts are implemented for the form above:"),"\n\n  ",Spacebars.include(n.lookupTemplate("code"),(function(){return["\n","{{","#each themeColors}}\n  ","{{","> button colortype=this data-color=this label=this}}\n","{{","/each}}\n\nconst positions = ['top-right', 'top-left', 'bottom-left', 'bottom-right']\nTemplate.toasts.onCreated(function () {\n  const instance = this\n  instance.counter = 1\n  instance.position = 0\n  instance.loaded = new ReactiveVar(false)\n  instance.transparent = false\n  instance.autohide = false\n  instance.prepend = true\n\n  Promise.all([\n    BlazeBs4.jumbotron.load()\n  ]).then(() => instance.loaded.set(true))\n})\nTemplate.toasts.helpers({\n  loaded () {\n    return Template.instance().loaded.get()\n  }\n})\nTemplate.toasts.events({\n  'change input#transparent' (event, instance) {\n    instance.transparent = event.currentTarget.checked\n  },\n  'change input#autohide'(event, instance) {\n    instance.autohide = event.currentTarget.checked\n  },\n  'change input#prepend'(event, instance) {\n    instance.prepend = event.currentTarget.checked\n  },\n  'click button' (event, instance) {\n    const color = event.currentTarget.dataset.color\n    BlazeBs4.toast.add({\n      label: `Hello World ${color}`,\n      body: `",HTML.CharRef({html:"&lt;",str:"<"}),"p",HTML.CharRef({html:"&gt;",str:">"}),"This is my ${englishCount(instance.counter++)} toast",HTML.CharRef({html:"&lt;",str:"<"}),"/p",HTML.CharRef({html:"&gt;",str:">"}),HTML.CharRef({html:"&lt;",str:"<"}),"p",HTML.CharRef({html:"&gt;",str:">"}),"${new Date()}",HTML.CharRef({html:"&lt;",str:"<"}),"/p",HTML.CharRef({html:"&gt;",str:">"}),"`,\n      headerBg: color,\n      headerFg: color === 'light' ? 'dark' : 'light',\n      width: '30em',\n      transparent: instance.transparent,\n      autohide: instance.autohide,\n      prepend: instance.prepend,\n      animation: true,\n      showId: true,\n      position: positions[instance.position++]\n    })\n    if (instance.position>=positions.length) instance.position = 0\n  }\n})\n  "]})),"\n\n      ",HTML.H2({class:"my-4"},"Toast parent"),"\n\n      ",HTML.P({class:"my-4"},"In order to make toasts work properly, you need to integrate the toast-parent in your render target (or body template).\n    The following steps illustrate this using a Template target, which is used by common routers (in this example ",HTML.CODE("ostrio:flow-router-extra"),"):"),"\n\n      ",HTML.H3({class:"my-4"},"1. Load the BlazeBs4.toast component"),"\n\n      ",HTML.P("First, you always need to load the toast component (and all other components, required for your layout):"),"\n\n",Spacebars.include(n.lookupTemplate("code"),(function(){return"\nTemplate.mainTarget.onCreated(function () {\n  const instance = this\n  instance.state = new ReactiveDict()\n\n  Promise.all([\n    BlazeBs4.navbar.load(),\n    BlazeBs4.collapse.load(),\n    BlazeBs4.toast.load(),\n  ]).then(() => instance.state.set('navLoaded', true))\n})\n"})),"\n\n\n  ",HTML.H3({class:"my-4"},"2. Embed the toasts so they are visible on every page"),"\n\n  ",HTML.P({class:"my-4"},"Example A: The following illustrates a Template layout, which is used as render target for dynamically rendering routes."),"\n\n",Spacebars.include(n.lookupTemplate("code"),(function(){return["\n",HTML.CharRef({html:"&lt;",str:"<"}),'template name="mainTarget"',HTML.CharRef({html:"&gt;",str:">"}),"\n\t",HTML.CharRef({html:"&lt;",str:"<"}),"main",HTML.CharRef({html:"&gt;",str:">"}),"\n\t\t","{{","#if navLoaded}}\n\t\t\t","{{",">toast}}\n\t\t","{{","/if}}\n\t\t","{{","> yield}}\n  ",HTML.CharRef({html:"&lt;",str:"<"}),"main",HTML.CharRef({html:"&gt;",str:">"}),"\n",HTML.CharRef({html:"&lt;",str:"<"}),"template",HTML.CharRef({html:"&gt;",str:">"}),"\n"]})),"\n\n      ",HTML.P({class:"my-4"},"Example B: The following illustrates a classic body-based Template layout:"),"\n\n",Spacebars.include(n.lookupTemplate("code"),(function(){return["\n",HTML.CharRef({html:"&lt;",str:"<"}),"body",HTML.CharRef({html:"&gt;",str:">"}),"\n    ","{{","#if navLoaded}}\n        ","{{",">toast}}\n    ","{{","/if}}\n    ","{{",">layout}}\n",HTML.CharRef({html:"&lt;",str:"<"}),"/body",HTML.CharRef({html:"&gt;",str:">"}),"\n"]})),"\n\n\n  ",HTML.H2({class:"my-4"},"Arguments and defaults"),"\n\n",Spacebars.include(n.lookupTemplate("code"),(function(){return'\nBlazeBs4.toast.add = function({\n  id = Random.id(),\n  label = "test",\n  body = "body",\n  small = \'\',\n  autohide = true,\n  delay = 5000,\n  headerBg = "warning",\n  headerFg = "light",\n  transparent = true,\n  animation = true,\n  showId = false,\n  width = \'inherit\',\n  debug = BlazeBs4.toast.debug, // defaults to undefined\n  position = \'top-right\' // top-right, top-left, bottom-right, bottom-left,\n  onShow = undefined,\n  onShown = undefined,\n  onHide = undefined,\n  onHidden = undefined\n})\n'})),"\n\n  ",HTML.H2({class:"my-4"},"Events"),"\n\n  ",HTML.P({class:"my-4"},"The toasts allows you to easily listen for the events ",HTML.CODE("show.bs.toast"),", ",HTML.CODE("shown.bs.toast"),", ",HTML.CODE("hide.bs.toast")," and ",HTML.CODE("hidden.bs.toast"),".\n    You can do this by passing the corresponding callback function ",HTML.CODE("onShow"),", ",HTML.CODE("onShown"),", ",HTML.CODE("onHide")," and ",HTML.CODE("onHidden")," as parameter:"),"\n\n",Spacebars.include(n.lookupTemplate("code"),(function(){return"\nconst id = 'my-cool-toast'\nconst onShow = toast => console.log(id, toast.id) // equal\nBlazeBs4.toast.add({ id, onShow })\n"})),"\n\n      ",HTML.H2({class:"my-4"},"Debug"),"\n\n      ",HTML.P({class:"my-4"},"You can debug toasts on a global level by setting ",HTML.CODE("BlazeBs4.toast.debug")," to ",HTML.CODE("true"),".\n          However, you can also debug on a component level by setting ",HTML.CODE("debug")," to ",HTML.CODE("true")," as parameter for ",HTML.CODE("BlazeBs4.toast.add")),"\n\n  "]}))]}))}

